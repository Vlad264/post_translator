/*
 * generated by Xtext 2.21.0
 */
grammar InternalPoST;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package su.nsk.iae.post.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package su.nsk.iae.post.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import su.nsk.iae.post.services.PoSTGrammarAccess;

}
@parser::members {
	private PoSTGrammarAccess grammarAccess;

	public void setGrammarAccess(PoSTGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGreetingsAssignment()); }
		(rule__Model__GreetingsAssignment)*
		{ after(grammarAccess.getModelAccess().getGreetingsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGreeting
entryRuleGreeting
:
{ before(grammarAccess.getGreetingRule()); }
	 ruleGreeting
{ after(grammarAccess.getGreetingRule()); } 
	 EOF 
;

// Rule Greeting
ruleGreeting 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGreetingAccess().getGroup()); }
		(rule__Greeting__Group__0)
		{ after(grammarAccess.getGreetingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getGroup()); }
		(rule__Expression__Group__0)
		{ after(grammarAccess.getExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXorExpression
entryRuleXorExpression
:
{ before(grammarAccess.getXorExpressionRule()); }
	 ruleXorExpression
{ after(grammarAccess.getXorExpressionRule()); } 
	 EOF 
;

// Rule XorExpression
ruleXorExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXorExpressionAccess().getGroup()); }
		(rule__XorExpression__Group__0)
		{ after(grammarAccess.getXorExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndExpression
entryRuleAndExpression
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
		(rule__AndExpression__Group__0)
		{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCompExpression
entryRuleCompExpression
:
{ before(grammarAccess.getCompExpressionRule()); }
	 ruleCompExpression
{ after(grammarAccess.getCompExpressionRule()); } 
	 EOF 
;

// Rule CompExpression
ruleCompExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompExpressionAccess().getGroup()); }
		(rule__CompExpression__Group__0)
		{ after(grammarAccess.getCompExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEquExpression
entryRuleEquExpression
:
{ before(grammarAccess.getEquExpressionRule()); }
	 ruleEquExpression
{ after(grammarAccess.getEquExpressionRule()); } 
	 EOF 
;

// Rule EquExpression
ruleEquExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEquExpressionAccess().getGroup()); }
		(rule__EquExpression__Group__0)
		{ after(grammarAccess.getEquExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddExpression
entryRuleAddExpression
:
{ before(grammarAccess.getAddExpressionRule()); }
	 ruleAddExpression
{ after(grammarAccess.getAddExpressionRule()); } 
	 EOF 
;

// Rule AddExpression
ruleAddExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAddExpressionAccess().getGroup()); }
		(rule__AddExpression__Group__0)
		{ after(grammarAccess.getAddExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMulExpression
entryRuleMulExpression
:
{ before(grammarAccess.getMulExpressionRule()); }
	 ruleMulExpression
{ after(grammarAccess.getMulExpressionRule()); } 
	 EOF 
;

// Rule MulExpression
ruleMulExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMulExpressionAccess().getGroup()); }
		(rule__MulExpression__Group__0)
		{ after(grammarAccess.getMulExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePowerExpression
entryRulePowerExpression
:
{ before(grammarAccess.getPowerExpressionRule()); }
	 rulePowerExpression
{ after(grammarAccess.getPowerExpressionRule()); } 
	 EOF 
;

// Rule PowerExpression
rulePowerExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPowerExpressionAccess().getGroup()); }
		(rule__PowerExpression__Group__0)
		{ after(grammarAccess.getPowerExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getGroup()); }
		(rule__UnaryExpression__Group__0)
		{ after(grammarAccess.getUnaryExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
		(rule__PrimaryExpression__Alternatives)
		{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatementList
entryRuleStatementList
:
{ before(grammarAccess.getStatementListRule()); }
	 ruleStatementList
{ after(grammarAccess.getStatementListRule()); } 
	 EOF 
;

// Rule StatementList
ruleStatementList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementListAccess().getGroup()); }
		(rule__StatementList__Group__0)
		{ after(grammarAccess.getStatementListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignmentStatement
entryRuleAssignmentStatement
:
{ before(grammarAccess.getAssignmentStatementRule()); }
	 ruleAssignmentStatement
{ after(grammarAccess.getAssignmentStatementRule()); } 
	 EOF 
;

// Rule AssignmentStatement
ruleAssignmentStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignmentStatementAccess().getGroup()); }
		(rule__AssignmentStatement__Group__0)
		{ after(grammarAccess.getAssignmentStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelectionStatement
entryRuleSelectionStatement
:
{ before(grammarAccess.getSelectionStatementRule()); }
	 ruleSelectionStatement
{ after(grammarAccess.getSelectionStatementRule()); } 
	 EOF 
;

// Rule SelectionStatement
ruleSelectionStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectionStatementAccess().getAlternatives()); }
		(rule__SelectionStatement__Alternatives)
		{ after(grammarAccess.getSelectionStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfStatement
entryRuleIfStatement
:
{ before(grammarAccess.getIfStatementRule()); }
	 ruleIfStatement
{ after(grammarAccess.getIfStatementRule()); } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfStatementAccess().getGroup()); }
		(rule__IfStatement__Group__0)
		{ after(grammarAccess.getIfStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCaseStatement
entryRuleCaseStatement
:
{ before(grammarAccess.getCaseStatementRule()); }
	 ruleCaseStatement
{ after(grammarAccess.getCaseStatementRule()); } 
	 EOF 
;

// Rule CaseStatement
ruleCaseStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCaseStatementAccess().getGroup()); }
		(rule__CaseStatement__Group__0)
		{ after(grammarAccess.getCaseStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCaseElement
entryRuleCaseElement
:
{ before(grammarAccess.getCaseElementRule()); }
	 ruleCaseElement
{ after(grammarAccess.getCaseElementRule()); } 
	 EOF 
;

// Rule CaseElement
ruleCaseElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCaseElementAccess().getGroup()); }
		(rule__CaseElement__Group__0)
		{ after(grammarAccess.getCaseElementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCaseList
entryRuleCaseList
:
{ before(grammarAccess.getCaseListRule()); }
	 ruleCaseList
{ after(grammarAccess.getCaseListRule()); } 
	 EOF 
;

// Rule CaseList
ruleCaseList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCaseListAccess().getGroup()); }
		(rule__CaseList__Group__0)
		{ after(grammarAccess.getCaseListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIterationStatement
entryRuleIterationStatement
:
{ before(grammarAccess.getIterationStatementRule()); }
	 ruleIterationStatement
{ after(grammarAccess.getIterationStatementRule()); } 
	 EOF 
;

// Rule IterationStatement
ruleIterationStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIterationStatementAccess().getAlternatives()); }
		(rule__IterationStatement__Alternatives)
		{ after(grammarAccess.getIterationStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForStatement
entryRuleForStatement
:
{ before(grammarAccess.getForStatementRule()); }
	 ruleForStatement
{ after(grammarAccess.getForStatementRule()); } 
	 EOF 
;

// Rule ForStatement
ruleForStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForStatementAccess().getGroup()); }
		(rule__ForStatement__Group__0)
		{ after(grammarAccess.getForStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForList
entryRuleForList
:
{ before(grammarAccess.getForListRule()); }
	 ruleForList
{ after(grammarAccess.getForListRule()); } 
	 EOF 
;

// Rule ForList
ruleForList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForListAccess().getGroup()); }
		(rule__ForList__Group__0)
		{ after(grammarAccess.getForListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhileStatement
entryRuleWhileStatement
:
{ before(grammarAccess.getWhileStatementRule()); }
	 ruleWhileStatement
{ after(grammarAccess.getWhileStatementRule()); } 
	 EOF 
;

// Rule WhileStatement
ruleWhileStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhileStatementAccess().getGroup()); }
		(rule__WhileStatement__Group__0)
		{ after(grammarAccess.getWhileStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRepeatStatement
entryRuleRepeatStatement
:
{ before(grammarAccess.getRepeatStatementRule()); }
	 ruleRepeatStatement
{ after(grammarAccess.getRepeatStatementRule()); } 
	 EOF 
;

// Rule RepeatStatement
ruleRepeatStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRepeatStatementAccess().getGroup()); }
		(rule__RepeatStatement__Group__0)
		{ after(grammarAccess.getRepeatStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSymbolicVariable
entryRuleSymbolicVariable
:
{ before(grammarAccess.getSymbolicVariableRule()); }
	 ruleSymbolicVariable
{ after(grammarAccess.getSymbolicVariableRule()); } 
	 EOF 
;

// Rule SymbolicVariable
ruleSymbolicVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSymbolicVariableAccess().getNameAssignment()); }
		(rule__SymbolicVariable__NameAssignment)
		{ after(grammarAccess.getSymbolicVariableAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarInitDeclaration
entryRuleVarInitDeclaration
:
{ before(grammarAccess.getVarInitDeclarationRule()); }
	 ruleVarInitDeclaration
{ after(grammarAccess.getVarInitDeclarationRule()); } 
	 EOF 
;

// Rule VarInitDeclaration
ruleVarInitDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarInitDeclarationAccess().getGroup()); }
		(rule__VarInitDeclaration__Group__0)
		{ after(grammarAccess.getVarInitDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarList
entryRuleVarList
:
{ before(grammarAccess.getVarListRule()); }
	 ruleVarList
{ after(grammarAccess.getVarListRule()); } 
	 EOF 
;

// Rule VarList
ruleVarList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarListAccess().getGroup()); }
		(rule__VarList__Group__0)
		{ after(grammarAccess.getVarListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExternalVarInitDeclaration
entryRuleExternalVarInitDeclaration
:
{ before(grammarAccess.getExternalVarInitDeclarationRule()); }
	 ruleExternalVarInitDeclaration
{ after(grammarAccess.getExternalVarInitDeclarationRule()); } 
	 EOF 
;

// Rule ExternalVarInitDeclaration
ruleExternalVarInitDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExternalVarInitDeclarationAccess().getGroup()); }
		(rule__ExternalVarInitDeclaration__Group__0)
		{ after(grammarAccess.getExternalVarInitDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGlobalVarInitDeclaration
entryRuleGlobalVarInitDeclaration
:
{ before(grammarAccess.getGlobalVarInitDeclarationRule()); }
	 ruleGlobalVarInitDeclaration
{ after(grammarAccess.getGlobalVarInitDeclarationRule()); } 
	 EOF 
;

// Rule GlobalVarInitDeclaration
ruleGlobalVarInitDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGlobalVarInitDeclarationAccess().getGroup()); }
		(rule__GlobalVarInitDeclaration__Group__0)
		{ after(grammarAccess.getGlobalVarInitDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTimeLiteral
entryRuleTimeLiteral
:
{ before(grammarAccess.getTimeLiteralRule()); }
	 ruleTimeLiteral
{ after(grammarAccess.getTimeLiteralRule()); } 
	 EOF 
;

// Rule TimeLiteral
ruleTimeLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTimeLiteralAccess().getGroup()); }
		(rule__TimeLiteral__Group__0)
		{ after(grammarAccess.getTimeLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDataTypeName
entryRuleDataTypeName
:
{ before(grammarAccess.getDataTypeNameRule()); }
	 ruleDataTypeName
{ after(grammarAccess.getDataTypeNameRule()); } 
	 EOF 
;

// Rule DataTypeName
ruleDataTypeName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDataTypeNameAccess().getAlternatives()); }
		(rule__DataTypeName__Alternatives)
		{ after(grammarAccess.getDataTypeNameAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumericTypeName
entryRuleNumericTypeName
:
{ before(grammarAccess.getNumericTypeNameRule()); }
	 ruleNumericTypeName
{ after(grammarAccess.getNumericTypeNameRule()); } 
	 EOF 
;

// Rule NumericTypeName
ruleNumericTypeName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumericTypeNameAccess().getAlternatives()); }
		(rule__NumericTypeName__Alternatives)
		{ after(grammarAccess.getNumericTypeNameAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntegerTypeName
entryRuleIntegerTypeName
:
{ before(grammarAccess.getIntegerTypeNameRule()); }
	 ruleIntegerTypeName
{ after(grammarAccess.getIntegerTypeNameRule()); } 
	 EOF 
;

// Rule IntegerTypeName
ruleIntegerTypeName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntegerTypeNameAccess().getAlternatives()); }
		(rule__IntegerTypeName__Alternatives)
		{ after(grammarAccess.getIntegerTypeNameAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSimpleSpecificationInit
entryRuleSimpleSpecificationInit
:
{ before(grammarAccess.getSimpleSpecificationInitRule()); }
	 ruleSimpleSpecificationInit
{ after(grammarAccess.getSimpleSpecificationInitRule()); } 
	 EOF 
;

// Rule SimpleSpecificationInit
ruleSimpleSpecificationInit 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleSpecificationInitAccess().getGroup()); }
		(rule__SimpleSpecificationInit__Group__0)
		{ after(grammarAccess.getSimpleSpecificationInitAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstant
entryRuleConstant
:
{ before(grammarAccess.getConstantRule()); }
	 ruleConstant
{ after(grammarAccess.getConstantRule()); } 
	 EOF 
;

// Rule Constant
ruleConstant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstantAccess().getAlternatives()); }
		(rule__Constant__Alternatives)
		{ after(grammarAccess.getConstantAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSignedInteger
entryRuleSignedInteger
:
{ before(grammarAccess.getSignedIntegerRule()); }
	 ruleSignedInteger
{ after(grammarAccess.getSignedIntegerRule()); } 
	 EOF 
;

// Rule SignedInteger
ruleSignedInteger 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSignedIntegerAccess().getGroup()); }
		(rule__SignedInteger__Group__0)
		{ after(grammarAccess.getSignedIntegerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumericLiteral
entryRuleNumericLiteral
:
{ before(grammarAccess.getNumericLiteralRule()); }
	 ruleNumericLiteral
{ after(grammarAccess.getNumericLiteralRule()); } 
	 EOF 
;

// Rule NumericLiteral
ruleNumericLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumericLiteralAccess().getAlternatives()); }
		(rule__NumericLiteral__Alternatives)
		{ after(grammarAccess.getNumericLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral
:
{ before(grammarAccess.getIntegerLiteralRule()); }
	 ruleIntegerLiteral
{ after(grammarAccess.getIntegerLiteralRule()); } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntegerLiteralAccess().getGroup()); }
		(rule__IntegerLiteral__Group__0)
		{ after(grammarAccess.getIntegerLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRealLiteral
entryRuleRealLiteral
:
{ before(grammarAccess.getRealLiteralRule()); }
	 ruleRealLiteral
{ after(grammarAccess.getRealLiteralRule()); } 
	 EOF 
;

// Rule RealLiteral
ruleRealLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRealLiteralAccess().getGroup()); }
		(rule__RealLiteral__Group__0)
		{ after(grammarAccess.getRealLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule CompOperator
ruleCompOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompOperatorAccess().getAlternatives()); }
		(rule__CompOperator__Alternatives)
		{ after(grammarAccess.getCompOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule EquOperator
ruleEquOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEquOperatorAccess().getAlternatives()); }
		(rule__EquOperator__Alternatives)
		{ after(grammarAccess.getEquOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule AddOperator
ruleAddOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddOperatorAccess().getAlternatives()); }
		(rule__AddOperator__Alternatives)
		{ after(grammarAccess.getAddOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule MulOperator
ruleMulOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMulOperatorAccess().getAlternatives()); }
		(rule__MulOperator__Alternatives)
		{ after(grammarAccess.getMulOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getConstAssignment_0()); }
		(rule__PrimaryExpression__ConstAssignment_0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getConstAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getVariableAssignment_1()); }
		(rule__PrimaryExpression__VariableAssignment_1)
		{ after(grammarAccess.getPrimaryExpressionAccess().getVariableAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_2()); }
		(rule__PrimaryExpression__Group_2__0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getGroup_0()); }
		(rule__Statement__Group_0__0)
		{ after(grammarAccess.getStatementAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getSelectionStatementParserRuleCall_1()); }
		ruleSelectionStatement
		{ after(grammarAccess.getStatementAccess().getSelectionStatementParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getIterationStatementParserRuleCall_2()); }
		ruleIterationStatement
		{ after(grammarAccess.getStatementAccess().getIterationStatementParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getGroup_3()); }
		(rule__Statement__Group_3__0)
		{ after(grammarAccess.getStatementAccess().getGroup_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getGroup_4()); }
		(rule__Statement__Group_4__0)
		{ after(grammarAccess.getStatementAccess().getGroup_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectionStatementAccess().getIfStatementParserRuleCall_0()); }
		ruleIfStatement
		{ after(grammarAccess.getSelectionStatementAccess().getIfStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSelectionStatementAccess().getCaseStatementParserRuleCall_1()); }
		ruleCaseStatement
		{ after(grammarAccess.getSelectionStatementAccess().getCaseStatementParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_0()); }
		ruleForStatement
		{ after(grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_1()); }
		ruleWhileStatement
		{ after(grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getIterationStatementAccess().getRepeatStatementParserRuleCall_2()); }
		ruleRepeatStatement
		{ after(grammarAccess.getIterationStatementAccess().getRepeatStatementParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeName__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataTypeNameAccess().getNumericTypeNameParserRuleCall_0()); }
		ruleNumericTypeName
		{ after(grammarAccess.getDataTypeNameAccess().getNumericTypeNameParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeNameAccess().getBIT_STRING_TYPE_NAMETerminalRuleCall_1()); }
		RULE_BIT_STRING_TYPE_NAME
		{ after(grammarAccess.getDataTypeNameAccess().getBIT_STRING_TYPE_NAMETerminalRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeNameAccess().getSTRINGKeyword_2()); }
		'STRING'
		{ after(grammarAccess.getDataTypeNameAccess().getSTRINGKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeNameAccess().getWSTRINGKeyword_3()); }
		'WSTRING'
		{ after(grammarAccess.getDataTypeNameAccess().getWSTRINGKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericTypeName__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumericTypeNameAccess().getIntegerTypeNameParserRuleCall_0()); }
		ruleIntegerTypeName
		{ after(grammarAccess.getNumericTypeNameAccess().getIntegerTypeNameParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumericTypeNameAccess().getREAL_TYPE_NAMETerminalRuleCall_1()); }
		RULE_REAL_TYPE_NAME
		{ after(grammarAccess.getNumericTypeNameAccess().getREAL_TYPE_NAMETerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerTypeName__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntegerTypeNameAccess().getSIGNED_INTEGER_TYPE_NAMETerminalRuleCall_0()); }
		RULE_SIGNED_INTEGER_TYPE_NAME
		{ after(grammarAccess.getIntegerTypeNameAccess().getSIGNED_INTEGER_TYPE_NAMETerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getIntegerTypeNameAccess().getUNSIGNED_INTEGER_TYPE_NAMETerminalRuleCall_1()); }
		RULE_UNSIGNED_INTEGER_TYPE_NAME
		{ after(grammarAccess.getIntegerTypeNameAccess().getUNSIGNED_INTEGER_TYPE_NAMETerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getNumericLiteralParserRuleCall_0()); }
		ruleNumericLiteral
		{ after(grammarAccess.getConstantAccess().getNumericLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getConstantAccess().getTimeLiteralParserRuleCall_1()); }
		ruleTimeLiteral
		{ after(grammarAccess.getConstantAccess().getTimeLiteralParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getConstantAccess().getGroup_2()); }
		(rule__Constant__Group_2__0)
		{ after(grammarAccess.getConstantAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericLiteral__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumericLiteralAccess().getIntegerLiteralParserRuleCall_0()); }
		ruleIntegerLiteral
		{ after(grammarAccess.getNumericLiteralAccess().getIntegerLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumericLiteralAccess().getRealLiteralParserRuleCall_1()); }
		ruleRealLiteral
		{ after(grammarAccess.getNumericLiteralAccess().getRealLiteralParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompOperatorAccess().getEQUALEnumLiteralDeclaration_0()); }
		('=')
		{ after(grammarAccess.getCompOperatorAccess().getEQUALEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getCompOperatorAccess().getNOT_EQUALEnumLiteralDeclaration_1()); }
		('<>')
		{ after(grammarAccess.getCompOperatorAccess().getNOT_EQUALEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEquOperatorAccess().getLESSEnumLiteralDeclaration_0()); }
		('<')
		{ after(grammarAccess.getEquOperatorAccess().getLESSEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getEquOperatorAccess().getGREATEREnumLiteralDeclaration_1()); }
		('>')
		{ after(grammarAccess.getEquOperatorAccess().getGREATEREnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getEquOperatorAccess().getLESS_EQUEnumLiteralDeclaration_2()); }
		('<=')
		{ after(grammarAccess.getEquOperatorAccess().getLESS_EQUEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getEquOperatorAccess().getGREATER_EQUEnumLiteralDeclaration_3()); }
		('>=')
		{ after(grammarAccess.getEquOperatorAccess().getGREATER_EQUEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddOperatorAccess().getPLUSEnumLiteralDeclaration_0()); }
		('+')
		{ after(grammarAccess.getAddOperatorAccess().getPLUSEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getAddOperatorAccess().getMINUSEnumLiteralDeclaration_1()); }
		('-')
		{ after(grammarAccess.getAddOperatorAccess().getMINUSEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMulOperatorAccess().getMULEnumLiteralDeclaration_0()); }
		('*')
		{ after(grammarAccess.getMulOperatorAccess().getMULEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getMulOperatorAccess().getDIVEnumLiteralDeclaration_1()); }
		('/')
		{ after(grammarAccess.getMulOperatorAccess().getDIVEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getMulOperatorAccess().getMODEnumLiteralDeclaration_2()); }
		('MOD')
		{ after(grammarAccess.getMulOperatorAccess().getMODEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Greeting__Group__0__Impl
	rule__Greeting__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreetingAccess().getHelloKeyword_0()); }
	'Hello'
	{ after(grammarAccess.getGreetingAccess().getHelloKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Greeting__Group__1__Impl
	rule__Greeting__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreetingAccess().getNameAssignment_1()); }
	(rule__Greeting__NameAssignment_1)
	{ after(grammarAccess.getGreetingAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Greeting__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreetingAccess().getExclamationMarkKeyword_2()); }
	'!'
	{ after(grammarAccess.getGreetingAccess().getExclamationMarkKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getXorExpressionParserRuleCall_0()); }
	ruleXorExpression
	{ after(grammarAccess.getExpressionAccess().getXorExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getGroup_1()); }
	(rule__Expression__Group_1__0)*
	{ after(grammarAccess.getExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__0__Impl
	rule__Expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getExpressionAccess().getExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__1__Impl
	rule__Expression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getOR_OPERATORTerminalRuleCall_1_1()); }
	RULE_OR_OPERATOR
	{ after(grammarAccess.getExpressionAccess().getOR_OPERATORTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getRightAssignment_1_2()); }
	(rule__Expression__RightAssignment_1_2)
	{ after(grammarAccess.getExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XorExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group__0__Impl
	rule__XorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
	{ after(grammarAccess.getXorExpressionAccess().getAndExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getGroup_1()); }
	(rule__XorExpression__Group_1__0)*
	{ after(grammarAccess.getXorExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XorExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group_1__0__Impl
	rule__XorExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getXorExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getXorExpressionAccess().getXorExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group_1__1__Impl
	rule__XorExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getXOR_OPERATORTerminalRuleCall_1_1()); }
	RULE_XOR_OPERATOR
	{ after(grammarAccess.getXorExpressionAccess().getXOR_OPERATORTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getRightAssignment_1_2()); }
	(rule__XorExpression__RightAssignment_1_2)
	{ after(grammarAccess.getXorExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getCompExpressionParserRuleCall_0()); }
	ruleCompExpression
	{ after(grammarAccess.getAndExpressionAccess().getCompExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
	(rule__AndExpression__Group_1__0)*
	{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__1__Impl
	rule__AndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getAND_OPERATORTerminalRuleCall_1_1()); }
	RULE_AND_OPERATOR
	{ after(grammarAccess.getAndExpressionAccess().getAND_OPERATORTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
	(rule__AndExpression__RightAssignment_1_2)
	{ after(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CompExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompExpression__Group__0__Impl
	rule__CompExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompExpressionAccess().getEquExpressionParserRuleCall_0()); }
	ruleEquExpression
	{ after(grammarAccess.getCompExpressionAccess().getEquExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompExpressionAccess().getGroup_1()); }
	(rule__CompExpression__Group_1__0)*
	{ after(grammarAccess.getCompExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CompExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompExpression__Group_1__0__Impl
	rule__CompExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompExpressionAccess().getCompExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getCompExpressionAccess().getCompExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompExpression__Group_1__1__Impl
	rule__CompExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompExpressionAccess().getCompOpAssignment_1_1()); }
	(rule__CompExpression__CompOpAssignment_1_1)
	{ after(grammarAccess.getCompExpressionAccess().getCompOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompExpressionAccess().getRightAssignment_1_2()); }
	(rule__CompExpression__RightAssignment_1_2)
	{ after(grammarAccess.getCompExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EquExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquExpression__Group__0__Impl
	rule__EquExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquExpressionAccess().getAddExpressionParserRuleCall_0()); }
	ruleAddExpression
	{ after(grammarAccess.getEquExpressionAccess().getAddExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquExpressionAccess().getGroup_1()); }
	(rule__EquExpression__Group_1__0)*
	{ after(grammarAccess.getEquExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EquExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquExpression__Group_1__0__Impl
	rule__EquExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquExpressionAccess().getEquExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getEquExpressionAccess().getEquExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquExpression__Group_1__1__Impl
	rule__EquExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquExpressionAccess().getEquOpAssignment_1_1()); }
	(rule__EquExpression__EquOpAssignment_1_1)
	{ after(grammarAccess.getEquExpressionAccess().getEquOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquExpressionAccess().getRightAssignment_1_2()); }
	(rule__EquExpression__RightAssignment_1_2)
	{ after(grammarAccess.getEquExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddExpression__Group__0__Impl
	rule__AddExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddExpressionAccess().getMulExpressionParserRuleCall_0()); }
	ruleMulExpression
	{ after(grammarAccess.getAddExpressionAccess().getMulExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddExpressionAccess().getGroup_1()); }
	(rule__AddExpression__Group_1__0)*
	{ after(grammarAccess.getAddExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddExpression__Group_1__0__Impl
	rule__AddExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddExpressionAccess().getAddExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAddExpressionAccess().getAddExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddExpression__Group_1__1__Impl
	rule__AddExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddExpressionAccess().getAddOpAssignment_1_1()); }
	(rule__AddExpression__AddOpAssignment_1_1)
	{ after(grammarAccess.getAddExpressionAccess().getAddOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddExpressionAccess().getRightAssignment_1_2()); }
	(rule__AddExpression__RightAssignment_1_2)
	{ after(grammarAccess.getAddExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MulExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulExpression__Group__0__Impl
	rule__MulExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulExpressionAccess().getPowerExpressionParserRuleCall_0()); }
	rulePowerExpression
	{ after(grammarAccess.getMulExpressionAccess().getPowerExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulExpressionAccess().getGroup_1()); }
	(rule__MulExpression__Group_1__0)*
	{ after(grammarAccess.getMulExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MulExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulExpression__Group_1__0__Impl
	rule__MulExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulExpressionAccess().getMulExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMulExpressionAccess().getMulExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulExpression__Group_1__1__Impl
	rule__MulExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulExpressionAccess().getMulOpAssignment_1_1()); }
	(rule__MulExpression__MulOpAssignment_1_1)
	{ after(grammarAccess.getMulExpressionAccess().getMulOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulExpressionAccess().getRightAssignment_1_2()); }
	(rule__MulExpression__RightAssignment_1_2)
	{ after(grammarAccess.getMulExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PowerExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerExpression__Group__0__Impl
	rule__PowerExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerExpressionAccess().getUnaryExpressionParserRuleCall_0()); }
	ruleUnaryExpression
	{ after(grammarAccess.getPowerExpressionAccess().getUnaryExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerExpressionAccess().getGroup_1()); }
	(rule__PowerExpression__Group_1__0)*
	{ after(grammarAccess.getPowerExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PowerExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerExpression__Group_1__0__Impl
	rule__PowerExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerExpressionAccess().getPowerExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getPowerExpressionAccess().getPowerExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerExpression__Group_1__1__Impl
	rule__PowerExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerExpressionAccess().getPOWER_OPERATORTerminalRuleCall_1_1()); }
	RULE_POWER_OPERATOR
	{ after(grammarAccess.getPowerExpressionAccess().getPOWER_OPERATORTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerExpressionAccess().getRightAssignment_1_2()); }
	(rule__PowerExpression__RightAssignment_1_2)
	{ after(grammarAccess.getPowerExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group__0__Impl
	rule__UnaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getUnOpAssignment_0()); }
	(rule__UnaryExpression__UnOpAssignment_0)?
	{ after(grammarAccess.getUnaryExpressionAccess().getUnOpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getRightAssignment_1()); }
	(rule__UnaryExpression__RightAssignment_1)
	{ after(grammarAccess.getUnaryExpressionAccess().getRightAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_2__0__Impl
	rule__PrimaryExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_2_0()); }
	'('
	{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_2__1__Impl
	rule__PrimaryExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getNestExprAssignment_2_1()); }
	(rule__PrimaryExpression__NestExprAssignment_2_1)
	{ after(grammarAccess.getPrimaryExpressionAccess().getNestExprAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_2_2()); }
	')'
	{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StatementList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StatementList__Group__0__Impl
	rule__StatementList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementListAccess().getStatementListAction_0()); }
	()
	{ after(grammarAccess.getStatementListAccess().getStatementListAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StatementList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementListAccess().getStatementsAssignment_1()); }
	(rule__StatementList__StatementsAssignment_1)*
	{ after(grammarAccess.getStatementListAccess().getStatementsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_0__0__Impl
	rule__Statement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getAssignmentStatementParserRuleCall_0_0()); }
	ruleAssignmentStatement
	{ after(grammarAccess.getStatementAccess().getAssignmentStatementParserRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getSemicolonKeyword_0_1()); }
	';'
	{ after(grammarAccess.getStatementAccess().getSemicolonKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_3__0__Impl
	rule__Statement__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getStatementAction_3_0()); }
	()
	{ after(grammarAccess.getStatementAccess().getStatementAction_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getGroup_3_1()); }
	(rule__Statement__Group_3_1__0)
	{ after(grammarAccess.getStatementAccess().getGroup_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_3_1__0__Impl
	rule__Statement__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getSUBPROGRAM_CONTROL_STATEMENTTerminalRuleCall_3_1_0()); }
	RULE_SUBPROGRAM_CONTROL_STATEMENT
	{ after(grammarAccess.getStatementAccess().getSUBPROGRAM_CONTROL_STATEMENTTerminalRuleCall_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getSemicolonKeyword_3_1_1()); }
	';'
	{ after(grammarAccess.getStatementAccess().getSemicolonKeyword_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_4__0__Impl
	rule__Statement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getStatementAction_4_0()); }
	()
	{ after(grammarAccess.getStatementAccess().getStatementAction_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getGroup_4_1()); }
	(rule__Statement__Group_4_1__0)
	{ after(grammarAccess.getStatementAccess().getGroup_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_4_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_4_1__0__Impl
	rule__Statement__Group_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_4_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getEXIT_STATEMENTTerminalRuleCall_4_1_0()); }
	RULE_EXIT_STATEMENT
	{ after(grammarAccess.getStatementAccess().getEXIT_STATEMENTTerminalRuleCall_4_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_4_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_4_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_4_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getSemicolonKeyword_4_1_1()); }
	';'
	{ after(grammarAccess.getStatementAccess().getSemicolonKeyword_4_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignmentStatement__Group__0__Impl
	rule__AssignmentStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentStatementAccess().getVariableAssignment_0()); }
	(rule__AssignmentStatement__VariableAssignment_0)
	{ after(grammarAccess.getAssignmentStatementAccess().getVariableAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignmentStatement__Group__1__Impl
	rule__AssignmentStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentStatementAccess().getColonEqualsSignKeyword_1()); }
	':='
	{ after(grammarAccess.getAssignmentStatementAccess().getColonEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignmentStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentStatementAccess().getValueAssignment_2()); }
	(rule__AssignmentStatement__ValueAssignment_2)
	{ after(grammarAccess.getAssignmentStatementAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__0__Impl
	rule__IfStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getIFKeyword_0()); }
	'IF'
	{ after(grammarAccess.getIfStatementAccess().getIFKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__1__Impl
	rule__IfStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getMainCondAssignment_1()); }
	(rule__IfStatement__MainCondAssignment_1)
	{ after(grammarAccess.getIfStatementAccess().getMainCondAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__2__Impl
	rule__IfStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getTHENKeyword_2()); }
	'THEN'
	{ after(grammarAccess.getIfStatementAccess().getTHENKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__3__Impl
	rule__IfStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getMainStatementAssignment_3()); }
	(rule__IfStatement__MainStatementAssignment_3)
	{ after(grammarAccess.getIfStatementAccess().getMainStatementAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__4__Impl
	rule__IfStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getGroup_4()); }
	(rule__IfStatement__Group_4__0)*
	{ after(grammarAccess.getIfStatementAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__5__Impl
	rule__IfStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getGroup_5()); }
	(rule__IfStatement__Group_5__0)?
	{ after(grammarAccess.getIfStatementAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getEND_IFKeyword_6()); }
	'END_IF'
	{ after(grammarAccess.getIfStatementAccess().getEND_IFKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group_4__0__Impl
	rule__IfStatement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getELSEIFKeyword_4_0()); }
	'ELSEIF'
	{ after(grammarAccess.getIfStatementAccess().getELSEIFKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group_4__1__Impl
	rule__IfStatement__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getElseIfCondAssignment_4_1()); }
	(rule__IfStatement__ElseIfCondAssignment_4_1)
	{ after(grammarAccess.getIfStatementAccess().getElseIfCondAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group_4__2__Impl
	rule__IfStatement__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getTHENKeyword_4_2()); }
	'THEN'
	{ after(grammarAccess.getIfStatementAccess().getTHENKeyword_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_4__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_4__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getElseIfStatementsAssignment_4_3()); }
	(rule__IfStatement__ElseIfStatementsAssignment_4_3)
	{ after(grammarAccess.getIfStatementAccess().getElseIfStatementsAssignment_4_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group_5__0__Impl
	rule__IfStatement__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getELSEKeyword_5_0()); }
	'ELSE'
	{ after(grammarAccess.getIfStatementAccess().getELSEKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getElseStatementAssignment_5_1()); }
	(rule__IfStatement__ElseStatementAssignment_5_1)
	{ after(grammarAccess.getIfStatementAccess().getElseStatementAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group__0__Impl
	rule__CaseStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getCASEKeyword_0()); }
	'CASE'
	{ after(grammarAccess.getCaseStatementAccess().getCASEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group__1__Impl
	rule__CaseStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getCondAssignment_1()); }
	(rule__CaseStatement__CondAssignment_1)
	{ after(grammarAccess.getCaseStatementAccess().getCondAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group__2__Impl
	rule__CaseStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getOFKeyword_2()); }
	'OF'
	{ after(grammarAccess.getCaseStatementAccess().getOFKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group__3__Impl
	rule__CaseStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getCaseStatementAccess().getCaseElementsAssignment_3()); }
		(rule__CaseStatement__CaseElementsAssignment_3)
		{ after(grammarAccess.getCaseStatementAccess().getCaseElementsAssignment_3()); }
	)
	(
		{ before(grammarAccess.getCaseStatementAccess().getCaseElementsAssignment_3()); }
		(rule__CaseStatement__CaseElementsAssignment_3)*
		{ after(grammarAccess.getCaseStatementAccess().getCaseElementsAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group__4__Impl
	rule__CaseStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getGroup_4()); }
	(rule__CaseStatement__Group_4__0)?
	{ after(grammarAccess.getCaseStatementAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getEND_CASEKeyword_5()); }
	'END_CASE'
	{ after(grammarAccess.getCaseStatementAccess().getEND_CASEKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseStatement__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group_4__0__Impl
	rule__CaseStatement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getELSEKeyword_4_0()); }
	'ELSE'
	{ after(grammarAccess.getCaseStatementAccess().getELSEKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getElseStatementAssignment_4_1()); }
	(rule__CaseStatement__ElseStatementAssignment_4_1)
	{ after(grammarAccess.getCaseStatementAccess().getElseStatementAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseElement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseElement__Group__0__Impl
	rule__CaseElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseElement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseElementAccess().getCaseListAssignment_0()); }
	(rule__CaseElement__CaseListAssignment_0)
	{ after(grammarAccess.getCaseElementAccess().getCaseListAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseElement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseElement__Group__1__Impl
	rule__CaseElement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseElement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseElementAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getCaseElementAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseElement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseElement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseElement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseElementAccess().getStatementAssignment_2()); }
	(rule__CaseElement__StatementAssignment_2)
	{ after(grammarAccess.getCaseElementAccess().getStatementAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseList__Group__0__Impl
	rule__CaseList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseListAccess().getCaseListElementAssignment_0()); }
	(rule__CaseList__CaseListElementAssignment_0)
	{ after(grammarAccess.getCaseListAccess().getCaseListElementAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseListAccess().getGroup_1()); }
	(rule__CaseList__Group_1__0)*
	{ after(grammarAccess.getCaseListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseList__Group_1__0__Impl
	rule__CaseList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseListAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getCaseListAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseListAccess().getCaseListElementAssignment_1_1()); }
	(rule__CaseList__CaseListElementAssignment_1_1)
	{ after(grammarAccess.getCaseListAccess().getCaseListElementAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__0__Impl
	rule__ForStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getFORKeyword_0()); }
	'FOR'
	{ after(grammarAccess.getForStatementAccess().getFORKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__1__Impl
	rule__ForStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getVariableAssignment_1()); }
	(rule__ForStatement__VariableAssignment_1)
	{ after(grammarAccess.getForStatementAccess().getVariableAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__2__Impl
	rule__ForStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getColonEqualsSignKeyword_2()); }
	':='
	{ after(grammarAccess.getForStatementAccess().getColonEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__3__Impl
	rule__ForStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getForListAssignment_3()); }
	(rule__ForStatement__ForListAssignment_3)
	{ after(grammarAccess.getForStatementAccess().getForListAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__4__Impl
	rule__ForStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getDOKeyword_4()); }
	'DO'
	{ after(grammarAccess.getForStatementAccess().getDOKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__5__Impl
	rule__ForStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getStatementAssignment_5()); }
	(rule__ForStatement__StatementAssignment_5)
	{ after(grammarAccess.getForStatementAccess().getStatementAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getEND_FORKeyword_6()); }
	'END_FOR'
	{ after(grammarAccess.getForStatementAccess().getEND_FORKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForList__Group__0__Impl
	rule__ForList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForListAccess().getStartAssignment_0()); }
	(rule__ForList__StartAssignment_0)
	{ after(grammarAccess.getForListAccess().getStartAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForList__Group__1__Impl
	rule__ForList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForListAccess().getTOKeyword_1()); }
	'TO'
	{ after(grammarAccess.getForListAccess().getTOKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForList__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForList__Group__2__Impl
	rule__ForList__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForList__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForListAccess().getEndAssignment_2()); }
	(rule__ForList__EndAssignment_2)
	{ after(grammarAccess.getForListAccess().getEndAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForList__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForList__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForList__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForListAccess().getGroup_3()); }
	(rule__ForList__Group_3__0)?
	{ after(grammarAccess.getForListAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForList__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForList__Group_3__0__Impl
	rule__ForList__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForList__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForListAccess().getBYKeyword_3_0()); }
	'BY'
	{ after(grammarAccess.getForListAccess().getBYKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForList__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForList__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForList__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForListAccess().getStepAssignment_3_1()); }
	(rule__ForList__StepAssignment_3_1)
	{ after(grammarAccess.getForListAccess().getStepAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__0__Impl
	rule__WhileStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getWHILEKeyword_0()); }
	'WHILE'
	{ after(grammarAccess.getWhileStatementAccess().getWHILEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__1__Impl
	rule__WhileStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getCondAssignment_1()); }
	(rule__WhileStatement__CondAssignment_1)
	{ after(grammarAccess.getWhileStatementAccess().getCondAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__2__Impl
	rule__WhileStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getDOKeyword_2()); }
	'DO'
	{ after(grammarAccess.getWhileStatementAccess().getDOKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__3__Impl
	rule__WhileStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getStatementAssignment_3()); }
	(rule__WhileStatement__StatementAssignment_3)
	{ after(grammarAccess.getWhileStatementAccess().getStatementAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getEND_WHILEKeyword_4()); }
	'END_WHILE'
	{ after(grammarAccess.getWhileStatementAccess().getEND_WHILEKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RepeatStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepeatStatement__Group__0__Impl
	rule__RepeatStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatStatementAccess().getREPEATKeyword_0()); }
	'REPEAT'
	{ after(grammarAccess.getRepeatStatementAccess().getREPEATKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepeatStatement__Group__1__Impl
	rule__RepeatStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatStatementAccess().getStatementAssignment_1()); }
	(rule__RepeatStatement__StatementAssignment_1)
	{ after(grammarAccess.getRepeatStatementAccess().getStatementAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepeatStatement__Group__2__Impl
	rule__RepeatStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatStatementAccess().getUNTILKeyword_2()); }
	'UNTIL'
	{ after(grammarAccess.getRepeatStatementAccess().getUNTILKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepeatStatement__Group__3__Impl
	rule__RepeatStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatStatementAccess().getCondAssignment_3()); }
	(rule__RepeatStatement__CondAssignment_3)
	{ after(grammarAccess.getRepeatStatementAccess().getCondAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepeatStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatStatementAccess().getEND_REPEATKeyword_4()); }
	'END_REPEAT'
	{ after(grammarAccess.getRepeatStatementAccess().getEND_REPEATKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarInitDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarInitDeclaration__Group__0__Impl
	rule__VarInitDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarInitDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarInitDeclarationAccess().getVarListAssignment_0()); }
	(rule__VarInitDeclaration__VarListAssignment_0)
	{ after(grammarAccess.getVarInitDeclarationAccess().getVarListAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarInitDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarInitDeclaration__Group__1__Impl
	rule__VarInitDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarInitDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarInitDeclarationAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getVarInitDeclarationAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarInitDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarInitDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarInitDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarInitDeclarationAccess().getSpecAssignment_2()); }
	(rule__VarInitDeclaration__SpecAssignment_2)
	{ after(grammarAccess.getVarInitDeclarationAccess().getSpecAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarList__Group__0__Impl
	rule__VarList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarListAccess().getVarsAssignment_0()); }
	(rule__VarList__VarsAssignment_0)
	{ after(grammarAccess.getVarListAccess().getVarsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarListAccess().getGroup_1()); }
	(rule__VarList__Group_1__0)*
	{ after(grammarAccess.getVarListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarList__Group_1__0__Impl
	rule__VarList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarListAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getVarListAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarListAccess().getVarsAssignment_1_1()); }
	(rule__VarList__VarsAssignment_1_1)
	{ after(grammarAccess.getVarListAccess().getVarsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExternalVarInitDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExternalVarInitDeclaration__Group__0__Impl
	rule__ExternalVarInitDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalVarInitDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExternalVarInitDeclarationAccess().getVarListAssignment_0()); }
	(rule__ExternalVarInitDeclaration__VarListAssignment_0)
	{ after(grammarAccess.getExternalVarInitDeclarationAccess().getVarListAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalVarInitDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExternalVarInitDeclaration__Group__1__Impl
	rule__ExternalVarInitDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalVarInitDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExternalVarInitDeclarationAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getExternalVarInitDeclarationAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalVarInitDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExternalVarInitDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalVarInitDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExternalVarInitDeclarationAccess().getTypeAssignment_2()); }
	(rule__ExternalVarInitDeclaration__TypeAssignment_2)
	{ after(grammarAccess.getExternalVarInitDeclarationAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GlobalVarInitDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GlobalVarInitDeclaration__Group__0__Impl
	rule__GlobalVarInitDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVarInitDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGlobalVarInitDeclarationAccess().getVarListAssignment_0()); }
	(rule__GlobalVarInitDeclaration__VarListAssignment_0)
	{ after(grammarAccess.getGlobalVarInitDeclarationAccess().getVarListAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVarInitDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GlobalVarInitDeclaration__Group__1__Impl
	rule__GlobalVarInitDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVarInitDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGlobalVarInitDeclarationAccess().getATKeyword_1()); }
	'AT'
	{ after(grammarAccess.getGlobalVarInitDeclarationAccess().getATKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVarInitDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GlobalVarInitDeclaration__Group__2__Impl
	rule__GlobalVarInitDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVarInitDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGlobalVarInitDeclarationAccess().getLocationAssignment_2()); }
	(rule__GlobalVarInitDeclaration__LocationAssignment_2)
	{ after(grammarAccess.getGlobalVarInitDeclarationAccess().getLocationAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVarInitDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GlobalVarInitDeclaration__Group__3__Impl
	rule__GlobalVarInitDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVarInitDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGlobalVarInitDeclarationAccess().getColonKeyword_3()); }
	':'
	{ after(grammarAccess.getGlobalVarInitDeclarationAccess().getColonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVarInitDeclaration__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GlobalVarInitDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVarInitDeclaration__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGlobalVarInitDeclarationAccess().getTypeAssignment_4()); }
	(rule__GlobalVarInitDeclaration__TypeAssignment_4)
	{ after(grammarAccess.getGlobalVarInitDeclarationAccess().getTypeAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TimeLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeLiteral__Group__0__Impl
	rule__TimeLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeLiteralAccess().getTIME_PREF_LITERALTerminalRuleCall_0()); }
	RULE_TIME_PREF_LITERAL
	{ after(grammarAccess.getTimeLiteralAccess().getTIME_PREF_LITERALTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeLiteral__Group__1__Impl
	rule__TimeLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeLiteralAccess().getNumberSignKeyword_1()); }
	'#'
	{ after(grammarAccess.getTimeLiteralAccess().getNumberSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeLiteral__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeLiteral__Group__2__Impl
	rule__TimeLiteral__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeLiteral__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeLiteralAccess().getHyphenMinusKeyword_2()); }
	('-')?
	{ after(grammarAccess.getTimeLiteralAccess().getHyphenMinusKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeLiteral__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeLiteral__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeLiteral__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeLiteralAccess().getIntervalAssignment_3()); }
	(rule__TimeLiteral__IntervalAssignment_3)
	{ after(grammarAccess.getTimeLiteralAccess().getIntervalAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleSpecificationInit__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleSpecificationInit__Group__0__Impl
	rule__SimpleSpecificationInit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSpecificationInit__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleSpecificationInitAccess().getSimpleSpecificationInitAction_0()); }
	()
	{ after(grammarAccess.getSimpleSpecificationInitAccess().getSimpleSpecificationInitAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSpecificationInit__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleSpecificationInit__Group__1__Impl
	rule__SimpleSpecificationInit__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSpecificationInit__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleSpecificationInitAccess().getTypeAssignment_1()); }
	(rule__SimpleSpecificationInit__TypeAssignment_1)
	{ after(grammarAccess.getSimpleSpecificationInitAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSpecificationInit__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleSpecificationInit__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSpecificationInit__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleSpecificationInitAccess().getGroup_2()); }
	(rule__SimpleSpecificationInit__Group_2__0)?
	{ after(grammarAccess.getSimpleSpecificationInitAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleSpecificationInit__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleSpecificationInit__Group_2__0__Impl
	rule__SimpleSpecificationInit__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSpecificationInit__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleSpecificationInitAccess().getColonEqualsSignKeyword_2_0()); }
	':='
	{ after(grammarAccess.getSimpleSpecificationInitAccess().getColonEqualsSignKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSpecificationInit__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleSpecificationInit__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSpecificationInit__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleSpecificationInitAccess().getValueAssignment_2_1()); }
	(rule__SimpleSpecificationInit__ValueAssignment_2_1)
	{ after(grammarAccess.getSimpleSpecificationInitAccess().getValueAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constant__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constant__Group_2__0__Impl
	rule__Constant__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantAccess().getConstantAction_2_0()); }
	()
	{ after(grammarAccess.getConstantAccess().getConstantAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constant__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantAccess().getBOOLEAN_LITERALTerminalRuleCall_2_1()); }
	RULE_BOOLEAN_LITERAL
	{ after(grammarAccess.getConstantAccess().getBOOLEAN_LITERALTerminalRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SignedInteger__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SignedInteger__Group__0__Impl
	rule__SignedInteger__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedInteger__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSignedIntegerAccess().getSigAssignment_0()); }
	(rule__SignedInteger__SigAssignment_0)?
	{ after(grammarAccess.getSignedIntegerAccess().getSigAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedInteger__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SignedInteger__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedInteger__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSignedIntegerAccess().getValueAssignment_1()); }
	(rule__SignedInteger__ValueAssignment_1)
	{ after(grammarAccess.getSignedIntegerAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntegerLiteral__Group__0__Impl
	rule__IntegerLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegerLiteralAccess().getGroup_0()); }
	(rule__IntegerLiteral__Group_0__0)?
	{ after(grammarAccess.getIntegerLiteralAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntegerLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegerLiteralAccess().getValueAssignment_1()); }
	(rule__IntegerLiteral__ValueAssignment_1)
	{ after(grammarAccess.getIntegerLiteralAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerLiteral__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntegerLiteral__Group_0__0__Impl
	rule__IntegerLiteral__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegerLiteralAccess().getTypeAssignment_0_0()); }
	(rule__IntegerLiteral__TypeAssignment_0_0)
	{ after(grammarAccess.getIntegerLiteralAccess().getTypeAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntegerLiteral__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegerLiteralAccess().getNumberSignKeyword_0_1()); }
	'#'
	{ after(grammarAccess.getIntegerLiteralAccess().getNumberSignKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RealLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RealLiteral__Group__0__Impl
	rule__RealLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRealLiteralAccess().getGroup_0()); }
	(rule__RealLiteral__Group_0__0)?
	{ after(grammarAccess.getRealLiteralAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RealLiteral__Group__1__Impl
	rule__RealLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRealLiteralAccess().getDivAssignment_1()); }
	(rule__RealLiteral__DivAssignment_1)
	{ after(grammarAccess.getRealLiteralAccess().getDivAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RealLiteral__Group__2__Impl
	rule__RealLiteral__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRealLiteralAccess().getFullStopKeyword_2()); }
	'.'
	{ after(grammarAccess.getRealLiteralAccess().getFullStopKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RealLiteral__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRealLiteralAccess().getModAssignment_3()); }
	(rule__RealLiteral__ModAssignment_3)
	{ after(grammarAccess.getRealLiteralAccess().getModAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RealLiteral__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RealLiteral__Group_0__0__Impl
	rule__RealLiteral__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRealLiteralAccess().getTypeAssignment_0_0()); }
	(rule__RealLiteral__TypeAssignment_0_0)
	{ after(grammarAccess.getRealLiteralAccess().getTypeAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RealLiteral__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRealLiteralAccess().getNumberSignKeyword_0_1()); }
	'#'
	{ after(grammarAccess.getRealLiteralAccess().getNumberSignKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__GreetingsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getGreetingsGreetingParserRuleCall_0()); }
		ruleGreeting
		{ after(grammarAccess.getModelAccess().getGreetingsGreetingParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGreetingAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getGreetingAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getRightXorExpressionParserRuleCall_1_2_0()); }
		ruleXorExpression
		{ after(grammarAccess.getExpressionAccess().getRightXorExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXorExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
		ruleAndExpression
		{ after(grammarAccess.getXorExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getRightCompExpressionParserRuleCall_1_2_0()); }
		ruleCompExpression
		{ after(grammarAccess.getAndExpressionAccess().getRightCompExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__CompOpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompExpressionAccess().getCompOpCompOperatorEnumRuleCall_1_1_0()); }
		ruleCompOperator
		{ after(grammarAccess.getCompExpressionAccess().getCompOpCompOperatorEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompExpressionAccess().getRightEquExpressionParserRuleCall_1_2_0()); }
		ruleEquExpression
		{ after(grammarAccess.getCompExpressionAccess().getRightEquExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__EquOpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEquExpressionAccess().getEquOpEquOperatorEnumRuleCall_1_1_0()); }
		ruleEquOperator
		{ after(grammarAccess.getEquExpressionAccess().getEquOpEquOperatorEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEquExpressionAccess().getRightAddExpressionParserRuleCall_1_2_0()); }
		ruleAddExpression
		{ after(grammarAccess.getEquExpressionAccess().getRightAddExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__AddOpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddExpressionAccess().getAddOpAddOperatorEnumRuleCall_1_1_0()); }
		ruleAddOperator
		{ after(grammarAccess.getAddExpressionAccess().getAddOpAddOperatorEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddExpressionAccess().getRightMulExpressionParserRuleCall_1_2_0()); }
		ruleMulExpression
		{ after(grammarAccess.getAddExpressionAccess().getRightMulExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpression__MulOpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMulExpressionAccess().getMulOpMulOperatorEnumRuleCall_1_1_0()); }
		ruleMulOperator
		{ after(grammarAccess.getMulExpressionAccess().getMulOpMulOperatorEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMulExpressionAccess().getRightPowerExpressionParserRuleCall_1_2_0()); }
		rulePowerExpression
		{ after(grammarAccess.getMulExpressionAccess().getRightPowerExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPowerExpressionAccess().getRightUnaryExpressionParserRuleCall_1_2_0()); }
		ruleUnaryExpression
		{ after(grammarAccess.getPowerExpressionAccess().getRightUnaryExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__UnOpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getUnOpUNARY_OPERATORTerminalRuleCall_0_0()); }
		RULE_UNARY_OPERATOR
		{ after(grammarAccess.getUnaryExpressionAccess().getUnOpUNARY_OPERATORTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__RightAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getRightPrimaryExpressionParserRuleCall_1_0()); }
		rulePrimaryExpression
		{ after(grammarAccess.getUnaryExpressionAccess().getRightPrimaryExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__ConstAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getConstConstantParserRuleCall_0_0()); }
		ruleConstant
		{ after(grammarAccess.getPrimaryExpressionAccess().getConstConstantParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__VariableAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getVariableSymbolicVariableCrossReference_1_0()); }
		(
			{ before(grammarAccess.getPrimaryExpressionAccess().getVariableSymbolicVariableIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPrimaryExpressionAccess().getVariableSymbolicVariableIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getPrimaryExpressionAccess().getVariableSymbolicVariableCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__NestExprAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getNestExprExpressionParserRuleCall_2_1_0()); }
		ruleExpression
		{ after(grammarAccess.getPrimaryExpressionAccess().getNestExprExpressionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementList__StatementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementListAccess().getStatementsStatementParserRuleCall_1_0()); }
		ruleStatement
		{ after(grammarAccess.getStatementListAccess().getStatementsStatementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__VariableAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentStatementAccess().getVariableSymbolicVariableCrossReference_0_0()); }
		(
			{ before(grammarAccess.getAssignmentStatementAccess().getVariableSymbolicVariableIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getAssignmentStatementAccess().getVariableSymbolicVariableIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getAssignmentStatementAccess().getVariableSymbolicVariableCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentStatementAccess().getValueExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getAssignmentStatementAccess().getValueExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__MainCondAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getMainCondExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getIfStatementAccess().getMainCondExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__MainStatementAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getMainStatementStatementListParserRuleCall_3_0()); }
		ruleStatementList
		{ after(grammarAccess.getIfStatementAccess().getMainStatementStatementListParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ElseIfCondAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getElseIfCondExpressionParserRuleCall_4_1_0()); }
		ruleExpression
		{ after(grammarAccess.getIfStatementAccess().getElseIfCondExpressionParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ElseIfStatementsAssignment_4_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getElseIfStatementsStatementListParserRuleCall_4_3_0()); }
		ruleStatementList
		{ after(grammarAccess.getIfStatementAccess().getElseIfStatementsStatementListParserRuleCall_4_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ElseStatementAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getElseStatementStatementListParserRuleCall_5_1_0()); }
		ruleStatementList
		{ after(grammarAccess.getIfStatementAccess().getElseStatementStatementListParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__CondAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseStatementAccess().getCondExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getCaseStatementAccess().getCondExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__CaseElementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseStatementAccess().getCaseElementsCaseElementParserRuleCall_3_0()); }
		ruleCaseElement
		{ after(grammarAccess.getCaseStatementAccess().getCaseElementsCaseElementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__ElseStatementAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseStatementAccess().getElseStatementStatementListParserRuleCall_4_1_0()); }
		ruleStatementList
		{ after(grammarAccess.getCaseStatementAccess().getElseStatementStatementListParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseElement__CaseListAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseElementAccess().getCaseListCaseListParserRuleCall_0_0()); }
		ruleCaseList
		{ after(grammarAccess.getCaseElementAccess().getCaseListCaseListParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseElement__StatementAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseElementAccess().getStatementStatementListParserRuleCall_2_0()); }
		ruleStatementList
		{ after(grammarAccess.getCaseElementAccess().getStatementStatementListParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseList__CaseListElementAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseListAccess().getCaseListElementSignedIntegerParserRuleCall_0_0()); }
		ruleSignedInteger
		{ after(grammarAccess.getCaseListAccess().getCaseListElementSignedIntegerParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseList__CaseListElementAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseListAccess().getCaseListElementSignedIntegerParserRuleCall_1_1_0()); }
		ruleSignedInteger
		{ after(grammarAccess.getCaseListAccess().getCaseListElementSignedIntegerParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__VariableAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForStatementAccess().getVariableSymbolicVariableCrossReference_1_0()); }
		(
			{ before(grammarAccess.getForStatementAccess().getVariableSymbolicVariableIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getForStatementAccess().getVariableSymbolicVariableIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getForStatementAccess().getVariableSymbolicVariableCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__ForListAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForStatementAccess().getForListForListParserRuleCall_3_0()); }
		ruleForList
		{ after(grammarAccess.getForStatementAccess().getForListForListParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__StatementAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForStatementAccess().getStatementStatementListParserRuleCall_5_0()); }
		ruleStatementList
		{ after(grammarAccess.getForStatementAccess().getStatementStatementListParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForList__StartAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForListAccess().getStartExpressionParserRuleCall_0_0()); }
		ruleExpression
		{ after(grammarAccess.getForListAccess().getStartExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForList__EndAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForListAccess().getEndExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getForListAccess().getEndExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForList__StepAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForListAccess().getStepExpressionParserRuleCall_3_1_0()); }
		ruleExpression
		{ after(grammarAccess.getForListAccess().getStepExpressionParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__CondAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileStatementAccess().getCondExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getWhileStatementAccess().getCondExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__StatementAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileStatementAccess().getStatementStatementListParserRuleCall_3_0()); }
		ruleStatementList
		{ after(grammarAccess.getWhileStatementAccess().getStatementStatementListParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__StatementAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRepeatStatementAccess().getStatementStatementListParserRuleCall_1_0()); }
		ruleStatementList
		{ after(grammarAccess.getRepeatStatementAccess().getStatementStatementListParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__CondAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRepeatStatementAccess().getCondExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getRepeatStatementAccess().getCondExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolicVariable__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSymbolicVariableAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getSymbolicVariableAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarInitDeclaration__VarListAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarInitDeclarationAccess().getVarListVarListParserRuleCall_0_0()); }
		ruleVarList
		{ after(grammarAccess.getVarInitDeclarationAccess().getVarListVarListParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarInitDeclaration__SpecAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarInitDeclarationAccess().getSpecSimpleSpecificationInitParserRuleCall_2_0()); }
		ruleSimpleSpecificationInit
		{ after(grammarAccess.getVarInitDeclarationAccess().getSpecSimpleSpecificationInitParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarList__VarsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarListAccess().getVarsSymbolicVariableParserRuleCall_0_0()); }
		ruleSymbolicVariable
		{ after(grammarAccess.getVarListAccess().getVarsSymbolicVariableParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarList__VarsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarListAccess().getVarsSymbolicVariableParserRuleCall_1_1_0()); }
		ruleSymbolicVariable
		{ after(grammarAccess.getVarListAccess().getVarsSymbolicVariableParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalVarInitDeclaration__VarListAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExternalVarInitDeclarationAccess().getVarListVarListParserRuleCall_0_0()); }
		ruleVarList
		{ after(grammarAccess.getExternalVarInitDeclarationAccess().getVarListVarListParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalVarInitDeclaration__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExternalVarInitDeclarationAccess().getTypeDataTypeNameParserRuleCall_2_0()); }
		ruleDataTypeName
		{ after(grammarAccess.getExternalVarInitDeclarationAccess().getTypeDataTypeNameParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVarInitDeclaration__VarListAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGlobalVarInitDeclarationAccess().getVarListVarListParserRuleCall_0_0()); }
		ruleVarList
		{ after(grammarAccess.getGlobalVarInitDeclarationAccess().getVarListVarListParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVarInitDeclaration__LocationAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGlobalVarInitDeclarationAccess().getLocationDIRECT_VARIABLETerminalRuleCall_2_0()); }
		RULE_DIRECT_VARIABLE
		{ after(grammarAccess.getGlobalVarInitDeclarationAccess().getLocationDIRECT_VARIABLETerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVarInitDeclaration__TypeAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGlobalVarInitDeclarationAccess().getTypeDataTypeNameParserRuleCall_4_0()); }
		ruleDataTypeName
		{ after(grammarAccess.getGlobalVarInitDeclarationAccess().getTypeDataTypeNameParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeLiteral__IntervalAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeLiteralAccess().getIntervalINTERVALTerminalRuleCall_3_0()); }
		RULE_INTERVAL
		{ after(grammarAccess.getTimeLiteralAccess().getIntervalINTERVALTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSpecificationInit__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleSpecificationInitAccess().getTypeDataTypeNameParserRuleCall_1_0()); }
		ruleDataTypeName
		{ after(grammarAccess.getSimpleSpecificationInitAccess().getTypeDataTypeNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSpecificationInit__ValueAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleSpecificationInitAccess().getValueConstantParserRuleCall_2_1_0()); }
		ruleConstant
		{ after(grammarAccess.getSimpleSpecificationInitAccess().getValueConstantParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedInteger__SigAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSignedIntegerAccess().getSigHyphenMinusKeyword_0_0()); }
		(
			{ before(grammarAccess.getSignedIntegerAccess().getSigHyphenMinusKeyword_0_0()); }
			'-'
			{ after(grammarAccess.getSignedIntegerAccess().getSigHyphenMinusKeyword_0_0()); }
		)
		{ after(grammarAccess.getSignedIntegerAccess().getSigHyphenMinusKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedInteger__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSignedIntegerAccess().getValueINTEGERTerminalRuleCall_1_0()); }
		RULE_INTEGER
		{ after(grammarAccess.getSignedIntegerAccess().getValueINTEGERTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__TypeAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntegerLiteralAccess().getTypeIntegerTypeNameParserRuleCall_0_0_0()); }
		ruleIntegerTypeName
		{ after(grammarAccess.getIntegerLiteralAccess().getTypeIntegerTypeNameParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntegerLiteralAccess().getValueSignedIntegerParserRuleCall_1_0()); }
		ruleSignedInteger
		{ after(grammarAccess.getIntegerLiteralAccess().getValueSignedIntegerParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__TypeAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRealLiteralAccess().getTypeREAL_TYPE_NAMETerminalRuleCall_0_0_0()); }
		RULE_REAL_TYPE_NAME
		{ after(grammarAccess.getRealLiteralAccess().getTypeREAL_TYPE_NAMETerminalRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__DivAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRealLiteralAccess().getDivSignedIntegerParserRuleCall_1_0()); }
		ruleSignedInteger
		{ after(grammarAccess.getRealLiteralAccess().getDivSignedIntegerParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__ModAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRealLiteralAccess().getModINTEGERTerminalRuleCall_3_0()); }
		RULE_INTEGER
		{ after(grammarAccess.getRealLiteralAccess().getModINTEGERTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_OR_OPERATOR : 'OR';

RULE_XOR_OPERATOR : 'XOR';

RULE_AND_OPERATOR : ('&'|'AND');

RULE_POWER_OPERATOR : '**';

RULE_UNARY_OPERATOR : 'NOT';

RULE_SUBPROGRAM_CONTROL_STATEMENT : 'RETURN';

RULE_EXIT_STATEMENT : 'EXIT';

RULE_DIRECT_VARIABLE : '%' RULE_DIRECT_TYPE_PREFIX RULE_DIRECT_SIZE_PREFIX RULE_INTEGER ('.' RULE_INTEGER)*;

fragment RULE_DIRECT_TYPE_PREFIX : ('I'|'Q'|'M');

fragment RULE_DIRECT_SIZE_PREFIX : ('X'|'B'|'W'|'D'|'L');

RULE_TIME_PREF_LITERAL : ('T'|'TIME');

RULE_INTERVAL : (RULE_INTEGER 'd')? (RULE_INTEGER 'h')? (RULE_INTEGER 'm')? (RULE_INTEGER 's')? (RULE_INTEGER 'ms')?;

RULE_SIGNED_INTEGER_TYPE_NAME : ('SINT'|'INT'|'DINT'|'LINT');

RULE_UNSIGNED_INTEGER_TYPE_NAME : ('USINT'|'UINT'|'UDINT'|'ULINT');

RULE_REAL_TYPE_NAME : ('REAL'|'LREAL');

RULE_BIT_STRING_TYPE_NAME : ('BOOL'|'BYTE'|'WORD'|'DWORD'|'LWORD');

RULE_INTEGER : RULE_DIGIT+;

RULE_BINARY_INTEGER : '2#' RULE_BIT+;

RULE_OCTAL_INTEGER : '8#' RULE_OCTAL_DIGIT+;

RULE_HEX_INTEGER : '16#' RULE_HEX_DIGIT+;

RULE_BOOLEAN_LITERAL : ('TRUE'|'FALSE');

fragment RULE_LETTER : ('A'..'Z'|'a'..'z'|'_');

fragment RULE_BIT : ('0'|'1');

fragment RULE_OCTAL_DIGIT : '0'..'7';

fragment RULE_DIGIT : '0'..'9';

fragment RULE_HEX_DIGIT : (RULE_DIGIT|'A'..'F');

RULE_ID : RULE_LETTER (RULE_LETTER|RULE_DIGIT)*;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
