/*
 * generated by Xtext 2.21.0
 */
package su.nsk.iae.post.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import su.nsk.iae.post.poST.Constant;
import su.nsk.iae.post.poST.Greeting;
import su.nsk.iae.post.poST.IntegerLiteral;
import su.nsk.iae.post.poST.Model;
import su.nsk.iae.post.poST.PoSTPackage;
import su.nsk.iae.post.poST.RealLiteral;
import su.nsk.iae.post.poST.SignedInteger;
import su.nsk.iae.post.poST.SimpleSpecificationInit;
import su.nsk.iae.post.poST.SingleElementTypeDeclaration;
import su.nsk.iae.post.poST.TimeLiteral;
import su.nsk.iae.post.services.PoSTGrammarAccess;

@SuppressWarnings("all")
public class PoSTSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PoSTGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PoSTPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PoSTPackage.CONSTANT:
				sequence_Constant(context, (Constant) semanticObject); 
				return; 
			case PoSTPackage.GREETING:
				sequence_Greeting(context, (Greeting) semanticObject); 
				return; 
			case PoSTPackage.INTEGER_LITERAL:
				sequence_IntegerLiteral(context, (IntegerLiteral) semanticObject); 
				return; 
			case PoSTPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case PoSTPackage.REAL_LITERAL:
				sequence_RealLiteral(context, (RealLiteral) semanticObject); 
				return; 
			case PoSTPackage.SIGNED_INTEGER:
				sequence_SignedInteger(context, (SignedInteger) semanticObject); 
				return; 
			case PoSTPackage.SIMPLE_SPECIFICATION_INIT:
				sequence_SimpleSpecificationInit(context, (SimpleSpecificationInit) semanticObject); 
				return; 
			case PoSTPackage.SINGLE_ELEMENT_TYPE_DECLARATION:
				sequence_SingleElementTypeDeclaration(context, (SingleElementTypeDeclaration) semanticObject); 
				return; 
			case PoSTPackage.TIME_LITERAL:
				sequence_TimeLiteral(context, (TimeLiteral) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Constant returns Constant
	 *
	 * Constraint:
	 *     {Constant}
	 */
	protected void sequence_Constant(ISerializationContext context, Constant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns Greeting
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Greeting(ISerializationContext context, Greeting semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PoSTPackage.Literals.GREETING__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PoSTPackage.Literals.GREETING__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGreetingAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Constant returns IntegerLiteral
	 *     NumericLiteral returns IntegerLiteral
	 *     IntegerLiteral returns IntegerLiteral
	 *
	 * Constraint:
	 *     (type=IntegerTypeName? value=SignedInteger)
	 */
	protected void sequence_IntegerLiteral(ISerializationContext context, IntegerLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     greetings+=Greeting+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Constant returns RealLiteral
	 *     NumericLiteral returns RealLiteral
	 *     RealLiteral returns RealLiteral
	 *
	 * Constraint:
	 *     (type=REAL_TYPE_NAME? div=SignedInteger mod=INTEGER)
	 */
	protected void sequence_RealLiteral(ISerializationContext context, RealLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SignedInteger returns SignedInteger
	 *
	 * Constraint:
	 *     (sig?='-'? value=INTEGER)
	 */
	protected void sequence_SignedInteger(ISerializationContext context, SignedInteger semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SimpleSpecificationInit returns SimpleSpecificationInit
	 *
	 * Constraint:
	 *     (type=DataTypeName value=Constant?)
	 */
	protected void sequence_SimpleSpecificationInit(ISerializationContext context, SimpleSpecificationInit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SingleElementTypeDeclaration returns SingleElementTypeDeclaration
	 *
	 * Constraint:
	 *     (name=ID type=SimpleSpecificationInit)
	 */
	protected void sequence_SingleElementTypeDeclaration(ISerializationContext context, SingleElementTypeDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PoSTPackage.Literals.SINGLE_ELEMENT_TYPE_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PoSTPackage.Literals.SINGLE_ELEMENT_TYPE_DECLARATION__NAME));
			if (transientValues.isValueTransient(semanticObject, PoSTPackage.Literals.SINGLE_ELEMENT_TYPE_DECLARATION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PoSTPackage.Literals.SINGLE_ELEMENT_TYPE_DECLARATION__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSingleElementTypeDeclarationAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSingleElementTypeDeclarationAccess().getTypeSimpleSpecificationInitParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TimeLiteral returns TimeLiteral
	 *     Constant returns TimeLiteral
	 *
	 * Constraint:
	 *     interval=INTERVAL
	 */
	protected void sequence_TimeLiteral(ISerializationContext context, TimeLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PoSTPackage.Literals.TIME_LITERAL__INTERVAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PoSTPackage.Literals.TIME_LITERAL__INTERVAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTimeLiteralAccess().getIntervalINTERVALTerminalRuleCall_3_0(), semanticObject.getInterval());
		feeder.finish();
	}
	
	
}
