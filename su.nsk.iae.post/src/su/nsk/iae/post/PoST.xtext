grammar su.nsk.iae.post.PoST hidden(WS, ML_COMMENT, SL_COMMENT)

generate poST "http://www.nsk.su/iae/post/PoST"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	greetings+=Greeting*;
	
Greeting:
	'Hello' name=ID '!';
	
/* ======================= START Time Literals ======================= */

TimeLiteral:
	 TIME_PREF_LITERAL '#' '-'? interval=INTERVAL
;

terminal TIME_PREF_LITERAL:
	('T' | 'TIME');

terminal INTERVAL returns ecore::EString:
	(INTEGER 'd')? (INTEGER 'h')? (INTEGER 'm')? (INTEGER 's')? (INTEGER 'ms')?;

/* ======================= END Time Literals ======================= */
	
/* ======================= START Elementary data types ======================= */

DataTypeName returns ecore::EString:
	NumericTypeName | BIT_STRING_TYPE_NAME | 'STRING' | 'WSTRING';

NumericTypeName returns ecore::EString:
	IntegerTypeName | REAL_TYPE_NAME;

IntegerTypeName returns ecore::EString:
	SIGNED_INTEGER_TYPE_NAME | UNSIGNED_INTEGER_TYPE_NAME;

terminal SIGNED_INTEGER_TYPE_NAME returns ecore::EString:
	'SINT' | 'INT' | 'DINT' | 'LINT';

terminal UNSIGNED_INTEGER_TYPE_NAME  returns ecore::EString:
	'USINT' | 'UINT' | 'UDINT' | 'ULINT';

terminal REAL_TYPE_NAME returns ecore::EString:
	'REAL' | 'LREAL';

terminal BIT_STRING_TYPE_NAME returns ecore::EString:
	'BOOL' | 'BYTE' | 'WORD' | 'DWORD' | 'LWORD';

SingleElementTypeDeclaration:
	name=ID ':' type=SimpleSpecificationInit;

SimpleSpecificationInit:
	{SimpleSpecificationInit} type=DataTypeName (':=' value=Constant)?;

/* ======================= END Elementary data types ======================= */
	
/* ======================= START Numeric Literals ======================= */

Constant:
	NumericLiteral | TimeLiteral | {Constant} BOOLEAN_LITERAL;

terminal INTEGER returns ecore::EInt:
	DIGIT+;

SignedInteger:
	(sig?='-')? value=INTEGER;

terminal BINARY_INTEGER:
	'2#' BIT+;

terminal OCTAL_INTEGER:
	'8#' OCTAL_DIGIT+;

terminal HEX_INTEGER:
	'16#' HEX_DIGIT+;
	
NumericLiteral:
	IntegerLiteral | RealLiteral;

IntegerLiteral:
	(type=IntegerTypeName '#')? value=SignedInteger;

RealLiteral:
	(type=REAL_TYPE_NAME '#')? div=SignedInteger '.' mod=INTEGER;

terminal BOOLEAN_LITERAL:
	'TRUE' | 'FALSE';

/* ======================= END Numeric Literals ======================= */
	
/* ======================= START Identifiers ======================= */

terminal fragment LETTER:
	'A'..'Z' | 'a'..'z' | '_';

terminal fragment BIT:
	'0' | '1';
	
terminal fragment OCTAL_DIGIT:
	'0'..'7';

terminal fragment DIGIT:
	'0'..'9';

terminal fragment HEX_DIGIT:
	DIGIT | 'A'..'F';

terminal ID returns ecore::EString:
	LETTER (LETTER | DIGIT)*;

terminal ML_COMMENT:
    '/*' -> '*/';
 
terminal SL_COMMENT:
    '//' !('\n'|'\r')* ('\r'? '\n')?;
 
terminal WS:
    (' '|'\t'|'\r'|'\n')+;
 
terminal ANY_OTHER:
    .;

/* ======================= END Identifiers ======================= */
